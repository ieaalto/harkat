sample(0:2, size=1, replace = TRUE, prob=c(.4, .3, .3))
sample(0:2, size=1, replace = TRUE, prob=c(.4, .3, .3))
sample(0:2, size=1, replace = TRUE, prob=c(.4, .3, .3))
sample(0:2, size=1, replace = TRUE, prob=c(.4, .3, .3))
sample(0:2, size=1, replace = TRUE, prob=c(.4, .3, .3))
sample(0:2, size=1, replace = TRUE, prob=c(.4, .3, .3))
grid = expand.grid(0:1, 0:2)
grid[sample(1:6, 1, replace=TRUE, prob=c(0.6,0.1,0.1,0.1,0.1,0.0)),]
grid[sample(1:6, 1, replace=TRUE, prob=c(0.6,0.1,0.1,0.1,0.1,0.0)),]
grid[sample(1:6, 1, replace=TRUE, prob=c(0.6,0.1,0.1,0.1,0.1,0.0)),]
grid[sample(1:6, 1, replace=TRUE, prob=c(0.6,0.1,0.1,0.1,0.1,0.0)),]
grid[sample(1:6, 1, replace=TRUE, prob=c(0.6,0.1,0.1,0.1,0.1,0.0)),]
data = c()
source('script.r')
dists[,1]
dists[1,]
source('script.r')
dists[,1]
source('script.r')
draw_sample()
draw_sample()
draw_sample()
source('script.r')
draw_sample()
draw_sample()
draw_sample()
draw_sample()
draw_sample()
draw_sample()
draw_sample()
draw_sample()
draw_sample()
draw_sample()
draw_sample()
draw_sample()
draw_sample()
source('script.r')
draw_sample()
draw_sample()
draw_sample()
draw_sample()
draw_sample()
draw_sample()
draw_sample()
rep(10){print('a')}
data = data.frame(colnames=c('x','y')
data
data = data.frame(colnames=c('x','y'))
data
data = data.frame
data = data.frame()
data
colnames(data) = c('x', 'y')
data = data.frame(x = c(), y = c())
data
data.frame(0, ) = c(1,2)
colnames(data)
data = data.frame(x = c(), y = c())
data[1] = c(1,2)
data[1,] = c(1,2)
data = data.frame(x = numeric(), y = numeric())
data
data[1, ] = c(1,2)
data
source('script.r')
source('script.r')
gen_data(10)
source('script.r')
gen_data(10)
train = gen_data(100)
length(train[train$Y = 1,])
length(train[train$Y == 1,])
length(train[train$Y == 2,])
length(train[train$Y == 3,])
length(train[, train$Y == 1])
length(train[train$Y == 1])
length(train[train$Y == 1, ])
train$Y
train$Y == 0
train$Y == 1
train[train$Y == 1, ]
length(train[train$Y == 1, ])
length(train[train$Y == 1, ]$Y)
length(train[train$Y == 9, ]$Y)
length(train[train$Y == 0, ]$Y)
length(train[train$Y == 2, ]$Y)
length(train[train$X1 == 0 && train$X2 == 0, ]$Y)
length(train[train$X1 == 0 AND train$X2 == 0, ]$Y)
length(train[train$X1 == 0 + train$X2 == 0, ]$Y)
length(train[train$X1 == 0 && train$X2 == 0, ]$Y)
train$X1 == 0 && train$X2 == 0
train$X1 == 0
train[train$X1 == 0]
train[train$X1 == 0, ]
train[train$X1 == 0, ][train$X2 == 0]
train[train$X1 == 0, ][train$X2 == 0, ]
A = train[train$X1 == 0, ]
A[A$X2 == 0]
A[A$X2 == 0, ]
length(A[A$X2 == 0, ])
length(A[A$X2 == 0, ]$Y)
length(train[train$Y == 1, ]$Y)
rep(0, 30)
rep(0, 6)
m matrix(rep(0,3), nrow=3)
m = matrix(rep(0,3), nrow=3)
m
m = matrix(rep(0,6), nrow=3)
m
m[1,2] = 1
m
m = matrix(rep(0,6), nrow=2)
m[1,2] = 2
m
View(grid)
source('script.r')
source('script.r')
class_conditional_estimate(0)
source('script.r')
class_conditional_estimate(0)
source('script.r')
class_conditional_estimate(0)
source('script.r')
class_conditional_estimate(0)
source('script.r')
class_conditional_estimate(0)
source('script.r')
class_conditional_estimate(0)
frame = data.frame(class = numeric(), feature = numeric(),  value = numeric(), p = numeric())
frame
frame[length(frame)+1, ] = c(1,1,1,1)
frame
source('script.r')
class_conditional_estimate(0)
class_conditional_estimate(0)
source('script.r')
estimates.kt
estimates.laplace
estimates.ml
source('script.r')
source('script.r')
source('script.r')
estimates.class.kt
source('script.r')
estimates.class.kt
estimates.class.ml
estimates.class.lp
source('script.r')
estimates.class.lp
estimates.class.ml
source('script.r')
estimates.class.ml
source('script.r')
estimates.class.ml
source('script.r')
estimates.class.ml
train[train$X1 == 1]$p
train[train$X1 == 1, ]$p
train[train$f == 1, ]$p
train[train$feature == 1, ]$p
e = estimates.laplace
c(TRUE, FALSE, TRUE)
c(TRUE, FALSE, TRUE) & c(TRUE, TRUE, FALSE)
px = nc*(e[e$Y == y & e$feature == 1 & e$value = x[1]]$p  + e[e$Y == y & e$feature == 2 & e$value = x[1]]$p )
px = nc*(e[e$Y == y & e$feature == 1 & e$value = x[1]]$p  + e[e$Y == y & e$feature == 2 & e$value == x[2]]$p )
px = nc*(e[e$Y == y & e$feature == 1 & e$value == x[1]]$p  + e[e$Y == y & e$feature == 2 & e$value == x[2]]$p )
px = 1*(e[e$Y == y & e$feature == 1 & e$value == x[1]]$p  + e[e$Y == y & e$feature == 2 & e$value == x[2]]$p )
px = 1*(e[e$class == y & e$feature == 1 & e$value == x[1]]$p  + e[e$class == y & e$feature == 2 & e$value == x[2]]$p )
px = 1*(e[e$class == 1 & e$feature == 1 & e$value == x[1]]$p  + e[e$class == 1 & e$feature == 2 & e$value == x[2]]$p )
px = 1*(e[e$class == 1 & e$feature == 1 & e$value == 1]$p  + e[e$class == 1 & e$feature == 2 & e$value == 2]$p )
px
e[e$class == 1 & e$feature == 2 & e$value == 2]$p
e$class == 1 & e$feature == 2 & e$value == 2
e[e$class == 1 & e$feature == 2 & e$value == 2, ]$p
typeof(e[e$class == 1 & e$feature == 2 & e$value == 2, ]$p)
source('script.r')
source('script.r')
test = gen_data(10000)
test
for (x in test[0:25]){
test[0:25]
test[0:25, ]
for(x in test[0:25, ])
print(x)}
for(x in test[0:25, ]){
print(x)}
print(x)
for(x in test[0:25, ]){
print(x)
print(',,')
}
for(x in test[, 0:25]){}
test[1,]
test[2,]
test[3,]
for ( i in 1:25){
c = classify(c(test[i, ]$X1, test[i,]$X2), estimates.laplace, estimates.class.lp)
print(c == test[i, ]$Y)}
for ( i in 1:25){
c = classify(c(test[i, ]$X1, test[i,]$X2), estimates.laplace, estimates.class.lp)
print(c == test[i, ]$Y)}
source('script.r')
for ( i in 1:25){
c = classify(c(test[i, ]$X1, test[i,]$X2), estimates.laplace, estimates.class.lp)
print(c == test[i, ]$Y)}
test$estY = rep(0, length(test$Y))
View(test)
View(test)
for ( i in 1:25){
c = classify(c(test[i, ]$X1, test[i,]$X2), estimates.laplace, estimates.class.lp)
test[i, ]$estY = c}
source('script.r')
source('script.r')
classify_n(800)
classify_n(10000)
length(test[test$Y == test$estY]$Y)
length(test[test$Y == test$estY, ]$Y)
test$Y == test$estY
View(test)
View(test)
classify_n(10000)
View(test)
View(test)
source('script.r')
classify_n(10000)
View(test)
View(test)
classify_n(30)
View(test)
View(test)
source('script.r')
classify_n(30)
View(m)
View(test)
source('script.r')
a
f(4)
a
source('script.r')
classify_n(10000, test = test)
View(test)
source('script.r')
test = classify_n(10000, test)
View(test)
length(test[test$Y == test$estY]$Y)
length(test[test$Y == test$estY, ]$Y)
source('script.r')
classify_n(10000, test = test)
test = classify_n(10000, test = test)
length(test[test$Y == test$estY, ]$Y)
source('script.r')
test = classify_n(10000, test = test)
