D[5]
D[1]
D[0]
?matrix
as.matrix(X, Y)
X[0]
X[1]
X[2]
Y[1]
Y[0]
Y[2]
X
X+Y
XY
D = matrix(X, Y, nrow = length(X), byrow=TRUE)
D
X[1]
Y[1]
Y[2]
X[2]
D = matrix(X, Y, nrow = length(X))
D
Y[1]
D = matrix((X, Y), nrow = length(X))
(X, Y)
D = matrix(c(X, Y), nrow = length(X))
D
X[3]
Y[3]
D
write.table(D, 'data.data')
D
H = read.table('data.data')
H
matrix(H)
H
H[1,1]
H[1]
H[1, 1]
H[1, 2]
X
M
D
rm(H)
H = read.table(D)
H = read.table('data.data')
H
typeof(H)
H[1]
H[1,1]
H[1,2]
for(i in 1.30){
print(i)
}
for(i in 1:30){
print(i)
}
(X - Y)^2
(X + Y)
X
Y
Y^2
Y[1]^2
mse(X, Y)
source('scripts.R')
mse(X, Y)
Z[22] = 0
Z = num()
Z = c()
Z[22] = 2
Z
f(X)
X
Y
X
1 + X
source('scripts.R')
source('scripts.R')
generate_data(30)
D = generate_data(30)
D[1,2]
D[1,1]
D[1]
D[2]
D[3]
plot(D)
typeof(D)
rm(D)
D ) generate_data(39)
D = generate_data(39)
D = generate_data(30)
?lm
as.data.frame(D)
M = D
D = as.data.frame(M)
D
D[1]
D[2]
fit  = lm(y ~ x1 + x2 + x3, data=D)
colnames(D) = c('x', 'y')
fit  = lm(y ~ x1 + x2 + x3, data=D)
fit  = lm(y ~ x + x^2, data=D)
plot(fit)
summary(fit)
fit  = lm(y ~ x, data=D)
summary(fit)
plot(fitted(fit))
plot(D)
?matplot
matplot(D, D)
plot(D[1])
D[1]
columns(D)
D[1,]
M[1,]
M[2,]
M[3,]
M[2,]
M[,2]
M[2,]
plot(M[1,])
lines(M[1,])
lines(M[1,], M[2,])
lines(M[2,])
dev.off()
lines(M[1,])
plot()
plot(M[1,])
lines(M[1,])
plot(M[2,])
lines(M[2,])
plot(M[1,])
plot(M[1,])
lines(M[1,])
lines(M[2,])
points(M[2,])
dev.off()
plot(M[1,])
lines(M[1,], col='red')
lines(M[2,], col='blue')
fit
fitted(fit)
lines(fitted(fit), col='green')
source('scripts.R')
plotall(M[1,], M[2, ], fitted(fit))
dev.off()
plotall(M[1,], M[2, ], fitted(fit))
D
as.data.frame(M)
data.frame(M)
M
M = generate_data(30)
M
source('scripts.R')
D = generate_data(30)
D
source('scripts.R')
D = generate_data(30)
D
source('scripts.R')
D = generate_data(30)
D
ncol(D)
data.frame(D)
F = data.frame(D)
X = runif(n, -3, 3)
X = runif(10, -3, 3)
Y = f(X) + rnorm(10, mean=0, sd=0.4)
m = matrix(c(X, Y), ncol = length(X))
m
m[1,]
X
m = matrix(c(X, Y), ncol=2)
m
data.frame(m)
colnames(m)
colnames(m) = c('x', )
colnames(m) = c('x', 'y')
m
D = data.frame(m)
D
source('scripts.R')
source('scripts.R')
D = generate_data(30)
?matrix
source('scripts.R')
D = generate_data(30)
source('scripts.R')
D = generate_data(30)
D
fit = lm(y ~ x + x^2, D)
fit = lm(y ~ x + x^2, data.frame(D))
summary(D)
D[1,]
D[,1]
D[,2]
plotall(D[,1], D[,2], fitted(fit))
fit = lm(y ~ x, D)
fit = lm(y ~ x, data.frame(D))
source('scripts.R')
D = generate_data(30)
model(y ~ x + x^2, D)
model(y ~ x^0 + x + x^2, D)
model(y ~ 1 + x + x^2, D)
model(y ~ 1 + x + x^2, D)
model(y ~ x, D)
dev.off()
model(y ~ x, D)
dev.off()
dev.off()
plot(c(1,2,3))
plot(c(3, 2, 1, 2, 3))
model(y ~ x, D)
model(y ~ x + x^2, D)
fit = model(y ~ x + x^2, D)
summary(fit)
fit = model(y ~ x + x^2 + x^3, D)
summary(fit)
fit = model(y ~ x1 + x2 + x3, D)
fit = model(y ~ x + x^2, D)
fit = model(y ~ x, D)
summary(fit)
fit = model(y ~ x + 2, D)
fit = model(y ~ 2 + x, D)
fit = model(y ~ x, D)
fit = model(y ~ x*3, D)
fit = model(y ~ x*x, D)
fit = model(y ~ x*x*x, D)
fit = model(y ~ x*x*x*x, D)
fit = model(y ~ x + x^2, D)
fit = model(y ~ x + x^2 + x^3, D)
fit = model(y ~ poly(x, 3), D)
fit = model(y ~ poly(x, 2), D)
fit = model(y ~ poly(x, 4), D)
fit = model(y ~ poly(x, 5), D)
fit = model(y ~ poly(x, 6), D)
fit = model(y ~ poly(x, 7), D)
fit = model(y ~ poly(x, 8), D)
fit = model(y ~ poly(x, 9), D)
fit = model(y ~ poly(x, 10), D)
fit = model(y ~ poly(x, 1), D)
m = data.frame(D)
m
m.x
m[0]
m[1]
m[2]
t = data.frame()
t
t[1] = c(1,2,3)
t = data.frame(row.names = c('x', 'y', 'Z'))
t
t[1] = c(1,2,3)
t
m
1:10
source('scripts.R')
mses(generate_data(30), 10)
source('scripts.R')
mses(generate_data(30), 10)
source('scripts.R')
mses(generate_data(30), 10)
source('scripts.R')
mses(generate_data(30), 10)
source('scripts.R')
mses(generate_data(30), 10)
source('scripts.R')
mses(generate_data(30), 10)
source('scripts.R')
mses(generate_data(30), 10)
errors = mses(generate_data(30), 10)
write.csv(errors, 'errors.csv')
rm(errors)
D = generate_data(30)
plot(D)
plotfit(data, 1)
source('scripts.R')
plotfit(data, 1)
data
plotfit(D, 1)
D = generate_data(30)
errors = mses(D, 10)
write.csv(errors, 'errors.csv')
plotfit(D, 1)
plotfit(D, 2)
plotfit(D, 3)
plotfit(D, 4)
plotfit(D, 5)
source('scripts.R')
plotfit(D, 5)
plotfit(D, 5)
source('scripts.R')
plotfit(D, 5)
source('scripts.R')
plotfit(D, 5)
source('scripts.R')
plotfit(D, 5)
fit = lm(y ~ poly(x_, 2), D)
ftd = fitted(fit)
ftd = matrix(c(D[,1], ftd), ncol=2)
ftd
D
colnames(ftd) = c('x', 'y')
ftd
plot(ftd)
plot(D)
lines(ftd)
curve(ftd)
curve(ftd)plot(D)
plot(D)
lines(ftd, type='l')
plot(D)
lines(D$x_)
points(D$x_)
plot(ftd)
lines(ftd$_x)
lines(ftd$x_)
ftd
colnames(ftd) = c('x_', 'y')
ftd
plot(D)
lines(ftd)
plot(D)
lines(ftd$x_)
lines(D$x_)
lines(D$y)
ftd = data.frame(ftd)
lines(ftd)
plot(D)
lines(D$x_)
lines(D)
D$x_
D$y_
D$y
plot(ftd)
lines(D$x_, predict(fit))
plot(y ~ x, D)
plot(y ~ x_, D)
lines(D)
plot(y ~ x_, D)
lines(D$x_, predict(fit))
plot(D)
lines(D[order(x_)])
lines(D[order(x_, )])
lines(D[order(D$x_)])
lines(D[with(D, order(D$x_))])
lines(D[with(D, order(x_))])
lines(D[ order(D[,1])])
D[,1]
lines(D[ ,order(D[1])])
D[1]
order(D[,1])
order(D[,2])
D[20]
D[,20]
D[1,20]
D[2,20]
D[2,1]
D[2,2]
D[2,3]
D
D[20, 3]
D[2, 20]
D
D
D$x_
D[1,2,3]
D[c(1,2,3)]
D[c(1,2)]
D[c(1)]
D[, c(1,2,3)]
D[c(1,2)]
D[1,2]
D[1,3]
D[2,2]
D[3,2]
D[5,2]
D[6,2]
D[, 1]
D[, 2]
D[, 3]
D[1]
D[1]
D[with(D, order(_x)), ]
D[with(D, order(x_)), ]
lines(D[with(D, order(x_)), ])
plot(D)
source('scripts.r')
sortby(D)
sortby(D, x_)
plot(D)
lines(ftd[with(ftd, order(_x)), ])
lines(ftd[with(ftd, order(x_)), ])
source('scripts.r')
plotfit(D, 1)
source('scripts.r')
plotfit(D, 1)
colnames(D) = c('x', 'y')
source('scripts.r')
plotfit(D, 1)
plotfit(D, 2)
plotfit(D, 3)
plotfit(D, 4)
plotfit(D, 5)
plotfit(D, 6)
plotfit(D, 7)
plotfit(D, 8)
plotfit(D, 9)
plotfit(D, 10)
T = generate_data(1000)
fits = list()
for(i in 1:10){
fits[i] = lm(y ~ poly(x, i), D)
}
for(i in 1:10){
fits = c(fits, lm(y ~ poly(x, i), D))
}
fits
fitted(fits[1])
fitted(fits[2])
fitted(fits[3])
fits = list()
for(i in 1:10){
fits[[i]] = lm(y ~ poly(x, i), D)
}
fits
fitted(fits(1))
fitted(fits[1])
fitted(fits[2])
fitted(fits[3])
fitted(fit)
i = 2
test = lm(y ~ poly(x, i), D)
fitted(test)
for(i in 1:10){
fits[[i]] = lm(y ~ poly(x, i), D)
}
fits[2]
test
fitted(fits[[2]])
data = generate_data(30)
source('scripts.r')
data = generate_data(30)
fits = makefits(10, data)
source('scripts.r')
D = generate_data(30)
fits = makefits(10, D)
source('scripts.r')
source('scripts.r')
for(i in 1:10){
plotfit(D, fits[[i]])
}
T = generate_data(1000)
for(fit in fits){}
for(fit in fits){
print fitted(fit)
}
for(fit in fits){
print(fitted(fit))
}
source('scripts.r')
errors = mses(D, fits)
errors
write.csv(errors, 'errors.csv')
predict(fits[[2]])
fitted(fits[[2]])
predictions = predict(fits[[2]], T[,1])
T[,1]
T
predictions = predict(fits[[2]], T)
D$x
D$y
new = data.frame(x=D$x)
new
new = data.frame(x = T$x)
predictions = predict(fits[[2]], newdata = new)
predictions = predict(fits[[2]], newdata = data.frame(x = D$x))
predict(fits[[2]], newdata = new)
typeof(D)
typeof(T)
typeof(new)
predictions = predict(fits[[2]], newdata = data.frame(x = D$x))
predictions = predict(fits[[2]], data.frame(x = D$x))
predictions = predict(fits[[4]], data.frame(x = D$x))
source("scripts.R")
D = generate_data(30)
fits = makefits(10, D)
D
predictions = predict(fits[[4]], data.frame(x = D$x))
T = generate_data(1000)
predictions = predict(fits[[4]], data.frame(y = D$y))
predictions = predict(fits[[4]], data.frame(x = D$x))
predictions = predict(fits[[2]], data.frame(x = D$x))
predictions = predict(fits[[10]], data.frame(x = D$x))
fits[[10]]
fitted(predictions)
predictions
predictions = predict(fits[[10]], data.frame(x = T$x))
predictions[1]
predictions[2]
typeof(predictions[2])
c(T$y)
mse(c(T$y), c(predictions))
plot(T)
lines(predictions[with(predictions, order(x)), ])
lines(predictions)
predictions
predictions = data.frame(x = T$x, y = predictions)
plot(T)
lines(predictions[with(predictions, order(x)), ])
plot(T)
lines(predictions[with(predictions, order(x)), ], col='green')
